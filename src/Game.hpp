// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Game.hpp
 * This header file contains the declaration of the described types in the IDL file.
 *
 * This file was generated by the tool fastddsgen.
 */

#ifndef FAST_DDS_GENERATED__GAME_HPP
#define FAST_DDS_GENERATED__GAME_HPP

#include <cstdint>
#include <string>
#include <utility>
#include <fastcdr/cdr/fixed_size_string.hpp>

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#define eProsima_user_DllExport __declspec( dllexport )
#else
#define eProsima_user_DllExport
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define eProsima_user_DllExport
#endif  // _WIN32

#if defined(_WIN32)
#if defined(EPROSIMA_USER_DLL_EXPORT)
#if defined(GAME_SOURCE)
#define GAME_DllAPI __declspec( dllexport )
#else
#define GAME_DllAPI __declspec( dllimport )
#endif // GAME_SOURCE
#else
#define GAME_DllAPI
#endif  // EPROSIMA_USER_DLL_EXPORT
#else
#define GAME_DllAPI
#endif // _WIN32

/*!
 * @brief This class represents the structure Game defined by the user in the IDL file.
 * @ingroup Game
 */
class Game
{
public:

    /*!
     * @brief Default constructor.
     */
    eProsima_user_DllExport Game()
    {
    }

    /*!
     * @brief Default destructor.
     */
    eProsima_user_DllExport ~Game()
    {
    }

    /*!
     * @brief Copy constructor.
     * @param x Reference to the object Game that will be copied.
     */
    eProsima_user_DllExport Game(
            const Game& x)
    {
                    m_game_id = x.m_game_id;

                    m_uid = x.m_uid;

                    m_oid = x.m_oid;

                    m_ngames = x.m_ngames;

                    m_wins = x.m_wins;

                    m_rps = x.m_rps;

                    m_ttt = x.m_ttt;

                    m_c4 = x.m_c4;

                    m_message = x.m_message;

    }

    /*!
     * @brief Move constructor.
     * @param x Reference to the object Game that will be copied.
     */
    eProsima_user_DllExport Game(
            Game&& x) noexcept
    {
        m_game_id = x.m_game_id;
        m_uid = std::move(x.m_uid);
        m_oid = std::move(x.m_oid);
        m_ngames = x.m_ngames;
        m_wins = x.m_wins;
        m_rps = x.m_rps;
        m_ttt = x.m_ttt;
        m_c4 = x.m_c4;
        m_message = std::move(x.m_message);
    }

    /*!
     * @brief Copy assignment.
     * @param x Reference to the object Game that will be copied.
     */
    eProsima_user_DllExport Game& operator =(
            const Game& x)
    {

                    m_game_id = x.m_game_id;

                    m_uid = x.m_uid;

                    m_oid = x.m_oid;

                    m_ngames = x.m_ngames;

                    m_wins = x.m_wins;

                    m_rps = x.m_rps;

                    m_ttt = x.m_ttt;

                    m_c4 = x.m_c4;

                    m_message = x.m_message;

        return *this;
    }

    /*!
     * @brief Move assignment.
     * @param x Reference to the object Game that will be copied.
     */
    eProsima_user_DllExport Game& operator =(
            Game&& x) noexcept
    {

        m_game_id = x.m_game_id;
        m_uid = std::move(x.m_uid);
        m_oid = std::move(x.m_oid);
        m_ngames = x.m_ngames;
        m_wins = x.m_wins;
        m_rps = x.m_rps;
        m_ttt = x.m_ttt;
        m_c4 = x.m_c4;
        m_message = std::move(x.m_message);
        return *this;
    }

    /*!
     * @brief Comparison operator.
     * @param x Game object to compare.
     */
    eProsima_user_DllExport bool operator ==(
            const Game& x) const
    {
        return (m_game_id == x.m_game_id &&
           m_uid == x.m_uid &&
           m_oid == x.m_oid &&
           m_ngames == x.m_ngames &&
           m_wins == x.m_wins &&
           m_rps == x.m_rps &&
           m_ttt == x.m_ttt &&
           m_c4 == x.m_c4 &&
           m_message == x.m_message);
    }

    /*!
     * @brief Comparison operator.
     * @param x Game object to compare.
     */
    eProsima_user_DllExport bool operator !=(
            const Game& x) const
    {
        return !(*this == x);
    }

    /*!
     * @brief This function sets a value in member game_id
     * @param _game_id New value for member game_id
     */
    eProsima_user_DllExport void game_id(
            uint32_t _game_id)
    {
        m_game_id = _game_id;
    }

    /*!
     * @brief This function returns the value of member game_id
     * @return Value of member game_id
     */
    eProsima_user_DllExport uint32_t game_id() const
    {
        return m_game_id;
    }

    /*!
     * @brief This function returns a reference to member game_id
     * @return Reference to member game_id
     */
    eProsima_user_DllExport uint32_t& game_id()
    {
        return m_game_id;
    }


    /*!
     * @brief This function copies the value in member uid
     * @param _uid New value to be copied in member uid
     */
    eProsima_user_DllExport void uid(
            const std::string& _uid)
    {
        m_uid = _uid;
    }

    /*!
     * @brief This function moves the value in member uid
     * @param _uid New value to be moved in member uid
     */
    eProsima_user_DllExport void uid(
            std::string&& _uid)
    {
        m_uid = std::move(_uid);
    }

    /*!
     * @brief This function returns a constant reference to member uid
     * @return Constant reference to member uid
     */
    eProsima_user_DllExport const std::string& uid() const
    {
        return m_uid;
    }

    /*!
     * @brief This function returns a reference to member uid
     * @return Reference to member uid
     */
    eProsima_user_DllExport std::string& uid()
    {
        return m_uid;
    }


    /*!
     * @brief This function copies the value in member oid
     * @param _oid New value to be copied in member oid
     */
    eProsima_user_DllExport void oid(
            const std::string& _oid)
    {
        m_oid = _oid;
    }

    /*!
     * @brief This function moves the value in member oid
     * @param _oid New value to be moved in member oid
     */
    eProsima_user_DllExport void oid(
            std::string&& _oid)
    {
        m_oid = std::move(_oid);
    }

    /*!
     * @brief This function returns a constant reference to member oid
     * @return Constant reference to member oid
     */
    eProsima_user_DllExport const std::string& oid() const
    {
        return m_oid;
    }

    /*!
     * @brief This function returns a reference to member oid
     * @return Reference to member oid
     */
    eProsima_user_DllExport std::string& oid()
    {
        return m_oid;
    }


    /*!
     * @brief This function sets a value in member ngames
     * @param _ngames New value for member ngames
     */
    eProsima_user_DllExport void ngames(
            uint32_t _ngames)
    {
        m_ngames = _ngames;
    }

    /*!
     * @brief This function returns the value of member ngames
     * @return Value of member ngames
     */
    eProsima_user_DllExport uint32_t ngames() const
    {
        return m_ngames;
    }

    /*!
     * @brief This function returns a reference to member ngames
     * @return Reference to member ngames
     */
    eProsima_user_DllExport uint32_t& ngames()
    {
        return m_ngames;
    }


    /*!
     * @brief This function sets a value in member wins
     * @param _wins New value for member wins
     */
    eProsima_user_DllExport void wins(
            uint32_t _wins)
    {
        m_wins = _wins;
    }

    /*!
     * @brief This function returns the value of member wins
     * @return Value of member wins
     */
    eProsima_user_DllExport uint32_t wins() const
    {
        return m_wins;
    }

    /*!
     * @brief This function returns a reference to member wins
     * @return Reference to member wins
     */
    eProsima_user_DllExport uint32_t& wins()
    {
        return m_wins;
    }


    /*!
     * @brief This function sets a value in member rps
     * @param _rps New value for member rps
     */
    eProsima_user_DllExport void rps(
            uint32_t _rps)
    {
        m_rps = _rps;
    }

    /*!
     * @brief This function returns the value of member rps
     * @return Value of member rps
     */
    eProsima_user_DllExport uint32_t rps() const
    {
        return m_rps;
    }

    /*!
     * @brief This function returns a reference to member rps
     * @return Reference to member rps
     */
    eProsima_user_DllExport uint32_t& rps()
    {
        return m_rps;
    }


    /*!
     * @brief This function sets a value in member ttt
     * @param _ttt New value for member ttt
     */
    eProsima_user_DllExport void ttt(
            uint32_t _ttt)
    {
        m_ttt = _ttt;
    }

    /*!
     * @brief This function returns the value of member ttt
     * @return Value of member ttt
     */
    eProsima_user_DllExport uint32_t ttt() const
    {
        return m_ttt;
    }

    /*!
     * @brief This function returns a reference to member ttt
     * @return Reference to member ttt
     */
    eProsima_user_DllExport uint32_t& ttt()
    {
        return m_ttt;
    }


    /*!
     * @brief This function sets a value in member c4
     * @param _c4 New value for member c4
     */
    eProsima_user_DllExport void c4(
            uint32_t _c4)
    {
        m_c4 = _c4;
    }

    /*!
     * @brief This function returns the value of member c4
     * @return Value of member c4
     */
    eProsima_user_DllExport uint32_t c4() const
    {
        return m_c4;
    }

    /*!
     * @brief This function returns a reference to member c4
     * @return Reference to member c4
     */
    eProsima_user_DllExport uint32_t& c4()
    {
        return m_c4;
    }


    /*!
     * @brief This function copies the value in member message
     * @param _message New value to be copied in member message
     */
    eProsima_user_DllExport void message(
            const std::string& _message)
    {
        m_message = _message;
    }

    /*!
     * @brief This function moves the value in member message
     * @param _message New value to be moved in member message
     */
    eProsima_user_DllExport void message(
            std::string&& _message)
    {
        m_message = std::move(_message);
    }

    /*!
     * @brief This function returns a constant reference to member message
     * @return Constant reference to member message
     */
    eProsima_user_DllExport const std::string& message() const
    {
        return m_message;
    }

    /*!
     * @brief This function returns a reference to member message
     * @return Reference to member message
     */
    eProsima_user_DllExport std::string& message()
    {
        return m_message;
    }



private:

    uint32_t m_game_id{0};
    std::string m_uid;
    std::string m_oid;
    uint32_t m_ngames{0};
    uint32_t m_wins{0};
    uint32_t m_rps{0};
    uint32_t m_ttt{0};
    uint32_t m_c4{0};
    std::string m_message;

};

#endif // _FAST_DDS_GENERATED_GAME_HPP_


