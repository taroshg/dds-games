// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file GameMessageTypeObjectSupport.cxx
 * Source file containing the implementation to register the TypeObject representation of the described types in the IDL file
 *
 * This file was generated by the tool fastddsgen.
 */

#include "GameMessageTypeObjectSupport.hpp"

#include <mutex>
#include <string>

#include <fastcdr/xcdr/external.hpp>
#include <fastcdr/xcdr/optional.hpp>
#include <fastdds/dds/domain/DomainParticipantFactory.hpp>
#include <fastdds/dds/log/Log.hpp>
#include <fastdds/dds/xtypes/common.hpp>
#include <fastdds/dds/xtypes/type_representation/ITypeObjectRegistry.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObject.hpp>
#include <fastdds/dds/xtypes/type_representation/TypeObjectUtils.hpp>

#include "GameMessage.hpp"


using namespace eprosima::fastdds::dds::xtypes;

// TypeIdentifier is returned by reference: dependent structures/unions are registered in this same method
void register_GameMessage_type_identifier(
        TypeIdentifierPair& type_ids_GameMessage)
{

    ReturnCode_t return_code_GameMessage {eprosima::fastdds::dds::RETCODE_OK};
    return_code_GameMessage =
        eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
        "GameMessage", type_ids_GameMessage);
    if (eprosima::fastdds::dds::RETCODE_OK != return_code_GameMessage)
    {
        StructTypeFlag struct_flags_GameMessage = TypeObjectUtils::build_struct_type_flag(eprosima::fastdds::dds::xtypes::ExtensibilityKind::APPENDABLE,
                false, false);
        QualifiedTypeName type_name_GameMessage = "GameMessage";
        eprosima::fastcdr::optional<AppliedBuiltinTypeAnnotations> type_ann_builtin_GameMessage;
        eprosima::fastcdr::optional<AppliedAnnotationSeq> ann_custom_GameMessage;
        CompleteTypeDetail detail_GameMessage = TypeObjectUtils::build_complete_type_detail(type_ann_builtin_GameMessage, ann_custom_GameMessage, type_name_GameMessage.to_string());
        CompleteStructHeader header_GameMessage;
        header_GameMessage = TypeObjectUtils::build_complete_struct_header(TypeIdentifier(), detail_GameMessage);
        CompleteStructMemberSeq member_seq_GameMessage;
        {
            TypeIdentifierPair type_ids_index;
            ReturnCode_t return_code_index {eprosima::fastdds::dds::RETCODE_OK};
            return_code_index =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_index);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_index)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "index Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_index = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_index = 0x00000000;
            bool common_index_ec {false};
            CommonStructMember common_index {TypeObjectUtils::build_common_struct_member(member_id_index, member_flags_index, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_index, common_index_ec))};
            if (!common_index_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure index member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_index = "index";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_index;
            ann_custom_GameMessage.reset();
            CompleteMemberDetail detail_index = TypeObjectUtils::build_complete_member_detail(name_index, member_ann_builtin_index, ann_custom_GameMessage);
            CompleteStructMember member_index = TypeObjectUtils::build_complete_struct_member(common_index, detail_index);
            TypeObjectUtils::add_complete_struct_member(member_seq_GameMessage, member_index);
        }
        {
            TypeIdentifierPair type_ids_game_id;
            ReturnCode_t return_code_game_id {eprosima::fastdds::dds::RETCODE_OK};
            return_code_game_id =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint8_t", type_ids_game_id);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_game_id)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "game_id Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_game_id = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_game_id = 0x00000001;
            bool common_game_id_ec {false};
            CommonStructMember common_game_id {TypeObjectUtils::build_common_struct_member(member_id_game_id, member_flags_game_id, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_game_id, common_game_id_ec))};
            if (!common_game_id_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure game_id member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_game_id = "game_id";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_game_id;
            ann_custom_GameMessage.reset();
            CompleteMemberDetail detail_game_id = TypeObjectUtils::build_complete_member_detail(name_game_id, member_ann_builtin_game_id, ann_custom_GameMessage);
            CompleteStructMember member_game_id = TypeObjectUtils::build_complete_struct_member(common_game_id, detail_game_id);
            TypeObjectUtils::add_complete_struct_member(member_seq_GameMessage, member_game_id);
        }
        {
            TypeIdentifierPair type_ids_uid;
            ReturnCode_t return_code_uid {eprosima::fastdds::dds::RETCODE_OK};
            return_code_uid =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_uid);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_uid)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_uid))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_uid = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_uid = 0x00000002;
            bool common_uid_ec {false};
            CommonStructMember common_uid {TypeObjectUtils::build_common_struct_member(member_id_uid, member_flags_uid, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_uid, common_uid_ec))};
            if (!common_uid_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure uid member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_uid = "uid";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_uid;
            ann_custom_GameMessage.reset();
            CompleteMemberDetail detail_uid = TypeObjectUtils::build_complete_member_detail(name_uid, member_ann_builtin_uid, ann_custom_GameMessage);
            CompleteStructMember member_uid = TypeObjectUtils::build_complete_struct_member(common_uid, detail_uid);
            TypeObjectUtils::add_complete_struct_member(member_seq_GameMessage, member_uid);
        }
        {
            TypeIdentifierPair type_ids_username;
            ReturnCode_t return_code_username {eprosima::fastdds::dds::RETCODE_OK};
            return_code_username =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_username);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_username)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_username))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_username = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_username = 0x00000003;
            bool common_username_ec {false};
            CommonStructMember common_username {TypeObjectUtils::build_common_struct_member(member_id_username, member_flags_username, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_username, common_username_ec))};
            if (!common_username_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure username member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_username = "username";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_username;
            ann_custom_GameMessage.reset();
            CompleteMemberDetail detail_username = TypeObjectUtils::build_complete_member_detail(name_username, member_ann_builtin_username, ann_custom_GameMessage);
            CompleteStructMember member_username = TypeObjectUtils::build_complete_struct_member(common_username, detail_username);
            TypeObjectUtils::add_complete_struct_member(member_seq_GameMessage, member_username);
        }
        {
            TypeIdentifierPair type_ids_rps;
            ReturnCode_t return_code_rps {eprosima::fastdds::dds::RETCODE_OK};
            return_code_rps =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_byte", type_ids_rps);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_rps)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "rps Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_rps = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_rps = 0x00000004;
            bool common_rps_ec {false};
            CommonStructMember common_rps {TypeObjectUtils::build_common_struct_member(member_id_rps, member_flags_rps, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_rps, common_rps_ec))};
            if (!common_rps_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure rps member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_rps = "rps";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_rps;
            ann_custom_GameMessage.reset();
            CompleteMemberDetail detail_rps = TypeObjectUtils::build_complete_member_detail(name_rps, member_ann_builtin_rps, ann_custom_GameMessage);
            CompleteStructMember member_rps = TypeObjectUtils::build_complete_struct_member(common_rps, detail_rps);
            TypeObjectUtils::add_complete_struct_member(member_seq_GameMessage, member_rps);
        }
        {
            TypeIdentifierPair type_ids_ttt;
            ReturnCode_t return_code_ttt {eprosima::fastdds::dds::RETCODE_OK};
            return_code_ttt =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint32_t", type_ids_ttt);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_ttt)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "ttt Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_ttt = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_ttt = 0x00000005;
            bool common_ttt_ec {false};
            CommonStructMember common_ttt {TypeObjectUtils::build_common_struct_member(member_id_ttt, member_flags_ttt, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_ttt, common_ttt_ec))};
            if (!common_ttt_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure ttt member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_ttt = "ttt";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_ttt;
            ann_custom_GameMessage.reset();
            CompleteMemberDetail detail_ttt = TypeObjectUtils::build_complete_member_detail(name_ttt, member_ann_builtin_ttt, ann_custom_GameMessage);
            CompleteStructMember member_ttt = TypeObjectUtils::build_complete_struct_member(common_ttt, detail_ttt);
            TypeObjectUtils::add_complete_struct_member(member_seq_GameMessage, member_ttt);
        }
        {
            TypeIdentifierPair type_ids_c4;
            ReturnCode_t return_code_c4 {eprosima::fastdds::dds::RETCODE_OK};
            return_code_c4 =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "_uint64_t", type_ids_c4);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_c4)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                        "c4 Structure member TypeIdentifier unknown to TypeObjectRegistry.");
                return;
            }
            StructMemberFlag member_flags_c4 = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_c4 = 0x00000006;
            bool common_c4_ec {false};
            CommonStructMember common_c4 {TypeObjectUtils::build_common_struct_member(member_id_c4, member_flags_c4, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_c4, common_c4_ec))};
            if (!common_c4_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure c4 member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_c4 = "c4";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_c4;
            ann_custom_GameMessage.reset();
            CompleteMemberDetail detail_c4 = TypeObjectUtils::build_complete_member_detail(name_c4, member_ann_builtin_c4, ann_custom_GameMessage);
            CompleteStructMember member_c4 = TypeObjectUtils::build_complete_struct_member(common_c4, detail_c4);
            TypeObjectUtils::add_complete_struct_member(member_seq_GameMessage, member_c4);
        }
        {
            TypeIdentifierPair type_ids_message;
            ReturnCode_t return_code_message {eprosima::fastdds::dds::RETCODE_OK};
            return_code_message =
                eprosima::fastdds::dds::DomainParticipantFactory::get_instance()->type_object_registry().get_type_identifiers(
                "anonymous_string_unbounded", type_ids_message);

            if (eprosima::fastdds::dds::RETCODE_OK != return_code_message)
            {
                {
                    SBound bound = 0;
                    StringSTypeDefn string_sdefn = TypeObjectUtils::build_string_s_type_defn(bound);
                    if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                            TypeObjectUtils::build_and_register_s_string_type_identifier(string_sdefn,
                            "anonymous_string_unbounded", type_ids_message))
                    {
                        EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                            "anonymous_string_unbounded already registered in TypeObjectRegistry for a different type.");
                    }
                }
            }
            StructMemberFlag member_flags_message = TypeObjectUtils::build_struct_member_flag(eprosima::fastdds::dds::xtypes::TryConstructFailAction::DISCARD,
                    false, false, false, false);
            MemberId member_id_message = 0x00000007;
            bool common_message_ec {false};
            CommonStructMember common_message {TypeObjectUtils::build_common_struct_member(member_id_message, member_flags_message, TypeObjectUtils::retrieve_complete_type_identifier(type_ids_message, common_message_ec))};
            if (!common_message_ec)
            {
                EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION, "Structure message member TypeIdentifier inconsistent.");
                return;
            }
            MemberName name_message = "message";
            eprosima::fastcdr::optional<AppliedBuiltinMemberAnnotations> member_ann_builtin_message;
            ann_custom_GameMessage.reset();
            CompleteMemberDetail detail_message = TypeObjectUtils::build_complete_member_detail(name_message, member_ann_builtin_message, ann_custom_GameMessage);
            CompleteStructMember member_message = TypeObjectUtils::build_complete_struct_member(common_message, detail_message);
            TypeObjectUtils::add_complete_struct_member(member_seq_GameMessage, member_message);
        }
        CompleteStructType struct_type_GameMessage = TypeObjectUtils::build_complete_struct_type(struct_flags_GameMessage, header_GameMessage, member_seq_GameMessage);
        if (eprosima::fastdds::dds::RETCODE_BAD_PARAMETER ==
                TypeObjectUtils::build_and_register_struct_type_object(struct_type_GameMessage, type_name_GameMessage.to_string(), type_ids_GameMessage))
        {
            EPROSIMA_LOG_ERROR(XTYPES_TYPE_REPRESENTATION,
                    "GameMessage already registered in TypeObjectRegistry for a different type.");
        }
    }
}

